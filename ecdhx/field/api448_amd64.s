// Code autogenerated by go generate; DO NOT EDIT.

// +build amd64

#include "fp448_amd64.h"

// func cSelect448(x, y *Element448, b uint)
TEXT ·cSelect448(SB),NOSPLIT,$0
    MOVQ x+0(FP), DI
    MOVQ y+8(FP), SI
    MOVQ b+16(FP), BX
    cselect(0(DI),0(SI),BX)
    RET

// func cSwap448(x, y *Element448, b uint)
TEXT ·cSwap448(SB),NOSPLIT,$0
    MOVQ x+0(FP), DI
    MOVQ y+8(FP), SI
    MOVQ b+16(FP), BX
    cswap(0(DI),0(SI),BX)
    RET

// func addSub448(z, x *Element448)
TEXT ·addSub448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ x+8(FP), SI
    addSub(0(DI),0(SI))
    RET

// func addLeg448(z,x,y *Element448)
TEXT ·addLeg448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ x+8(FP), SI
    MOVQ y+16(FP), BX
    addition(0(DI),0(SI),0(BX))
    RET

// func addAdx448(z,x,y *Element448)
TEXT ·addAdx448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ x+8(FP), SI
    MOVQ y+16(FP), BX
    additionAdx(0(DI),0(SI),0(BX))
    RET

// func sub448(z,x,y *Element448)
TEXT ·sub448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ x+8(FP), SI
    MOVQ y+16(FP), BX
    subtraction(0(DI),0(SI),0(BX))
    RET

// func mulA24448(z, x *Element448)
TEXT ·mulA24448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ x+8(FP), SI
    multiplyA24(0(DI),0(SI))
    RET

// func mulA24Adx448(z, x *Element448)
TEXT ·mulA24Adx448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ x+8(FP), SI
    multiplyA24Adx(0(DI),0(SI))
    RET

// func intMul448(z *bigElement448, x, y *Element448)
TEXT ·intMul448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ x+8(FP), SI
    MOVQ y+16(FP), BX
    integerMul(0(DI),0(SI),0(BX))
    RET

// func intMulAdx448(z *bigElement448, x, y *Element448)
TEXT ·intMulAdx448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ x+8(FP), SI
    MOVQ y+16(FP), BX
    integerMulAdx(0(DI),0(SI),0(BX))
    RET

// func intSqr448(z *bigElement448, x *Element448)
TEXT ·intSqr448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ x+8(FP), SI
    integerSqr(0(DI),0(SI))
    RET

// func intSqrAdx448(z *bigElement448, x *Element448)
TEXT ·intSqrAdx448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ x+8(FP), SI
    integerSqrAdx(0(DI),0(SI))
    RET

// func reduce448(z *Element448, x *bigElement448)
TEXT ·reduce448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ x+8(FP), SI
    reduceFromDouble(0(DI),0(SI))
    RET

// func reduceAdx448(z *Element448, x *bigElement448)
TEXT ·reduceAdx448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ x+8(FP), SI
    reduceFromDoubleAdx(0(DI),0(SI))
    RET

// func sqrn448(z *Element448, buffer *bigElement448, times uint)
TEXT ·sqrn448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ buffer+8(FP), SI
    MOVQ times+16(FP),BX
    L0:
        CMPQ BX, $0
        JZ L1
        integerSqr(0(SI),0(DI))
        reduceFromDouble(0(DI),0(SI))
        DECQ BX
        JMP L0
    L1:
    RET

// func sqrnAdx448(z *Element448, buffer *bigElement448, times uint)
TEXT ·sqrnAdx448(SB),NOSPLIT,$0
    MOVQ z+0(FP), DI
    MOVQ buffer+8(FP), SI
    MOVQ times+16(FP),BX
    L0:
        CMPQ BX, $0
        JZ L1
        integerSqrAdx(0(SI),0(DI))
        reduceFromDoubleAdx(0(DI),0(SI))
        DECQ BX
        JMP L0
    L1:
    RET

// Code autogenerated by go generate; DO NOT EDIT.
