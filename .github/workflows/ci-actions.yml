name: CIRCL
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  amd64_job:
    name: Go-${{matrix.GOVER}}/amd64
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        GOVER: ['1.19', '1.18', '1.17']
    steps:
      - name: Setup Go-${{ matrix.GOVER }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.GOVER }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.48
          args: --config=./.etc/golangci.yml ./...
      - name: Check shadowing
        run: |
         go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest
         go vet -vettool=$(which shadow) ./... 2>&1 | awk -f .etc/action.awk
        shell: bash
      - name: Verifying Code
        run: |
         go generate -v ./...
         test -z "$(git status --porcelain)"
         go vet ./...
        shell: bash
      - name: Building
        run: go build -v ./...
      - name: Testing
        run: go test -v -count=1 ./...
  exotic_job:
    name: Go-${{matrix.CFG[2]}}/${{matrix.CFG[0]}}
    needs: [ amd64_job ]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        CFG: [ [arm64,arm64v8,1.19] ]
    steps:
      - uses: actions/checkout@v3
      - name: Enabling Docker Experimental
        run: |
          echo $'{\n    "experimental": true\n}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
      - name: Pulling Images
        run: |
          docker pull -q multiarch/qemu-user-static
          docker pull -q --platform linux/${{matrix.CFG[0]}} ${{matrix.CFG[1]}}/golang:${{matrix.CFG[2]}}
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Testing
        run: |
          docker run --rm -v `pwd`:`pwd` -w `pwd` ${{matrix.CFG[1]}}/golang:${{matrix.CFG[2]}} go test -v ./...
  coverage_amd64_job:
    needs: [ amd64_job ]
    if: github.event_name == 'push'
    runs-on: ubuntu-20.04
    name: amd64/coverage
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'
      - name: Produce Coverage
        run: go test -coverprofile=./coverage.txt ./...
      - name: Upload Codecov
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.txt
  osCompat:
    runs-on: ${{ matrix.os }}
    needs: [ amd64_job ]
    name: Running on ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-11, windows-2019]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'
      - name: Building
        run: go build -v ./...
      - name: Testing
        run: go test -v -count=1 ./...
